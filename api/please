#!/bin/bash

source .env
source ../config/helper
print_help() {
echo    Commands: install, link, up, restart, down, logs 
echo        install         install domain_service
echo        link            service_name  connect an service and domain
echo        up              create and start service
echo        restart         restarts service
echo        down            delete service docker
echo        logs            get docker logs
echo        help            print this page
}



# echo install $1=deploy_mode $2=work_dir $3=domain_net_ip
install_service() {
    load_config_service api
    echo deploy_mode=${1} > .env
    mkdir -p ${work_dir}/api_v1
    cp ./default.conf ${work_dir}/api_v1/default.conf
    echo api_v1_path=${work_dir}/api_v1 >> .env
    mkdir -p ${repos_dir}/api
    echo api_v1_repos=${repos_dir}/api >> .env
    echo domain_net_ip=${domain_net_ip} >> .env
    echo api_net_ip=${api_net_ip} >> .env
    echo ALLOW_ORIGINS= > .env.default
    if [ $deploy_mode == "develop" ]; then
        echo COOKIE_SECURE=false >> .env.default
        echo SAME_SITE=none >> .env.default
    else
        echo COOKIE_SECURE=false >> .env.default
        echo SAME_SITE=none >> .env.default
    fi
    docker-compose up -d
}

# $1 == name, $2 == domain_net_ip, $3 == route
link_service() {
    load_config_service $1
    current=${PWD}
    cp default.location ${api_v1_path}/${1}_${route}.location
    cd ${api_v1_path}
    sed -i s/{location}/${route}/g ${1}_${route}.location
    sed -i s/{proxy_pass}/${api_net_ip}/g ${1}_${route}.location
    cd $current
    echo $1 is successfully link to domain ${route} with IP: ${api_net_ip}.
    docker-compose restart
}

up_service() {
    docker-compose up -d
}

restart_service() {
    docker-compose restart
}

down_service() {
    docker-compose down
}

logs_service(){
    docker-compose logs "${@:1}"
}

case $1 in
    install)
        install_service "${@:2}";;
    link)
        link_service "${@:2}";;
    up)
        up_service ;;
    restart)
        restart_service;;
    down)
        down_service;;
    logs)
        logs_service;;
    help)
        print_helpt;;
    *)
        print_help
esac
